Vagrant::Config.run do |config|
  require "./.config/config"

  Vm.descendants.each_with_index do |vm,count_vms|
    (1..vm::Count).each do |index|
      # Initialize & set counters
      count = ""
      formatted_count = ""
      if vm::Count > 1
        if index > 1
          count = index - 1
        end
        formatted_count = "(#{index} of #{vm::Count})"
      end

      config.vm.define "#{vm::Shortname}#{count}" do |vm_config|

        vm_config.ssh.max_tries = vm::SSH_tries
        vm_config.ssh.forward_agent = vm::SSH_forward_agent
        vm_config.vm.box = vm::Basebox
        vm_config.vm.box_url = vm::Box_url
        vm_config.vm.auto_port_range = Conf::SSH_range

        # Allow VMs to define a static IP to assign. This helps with multi-vm
        # scenarios where we want to ensure that IPs to various boxes are
        # consistent across reboots.
        if defined?(vm::Host_IP)
          ip = vm::Host_IP
        else
          ip = "#{Conf::Network}.#{Conf::Subnet}.#{Conf::Host_IP + ((count_vms) * 10) + index - 1}"
        end
        vm_config.vm.network :hostonly, ip

        hostname = "#{vm::Shortname}#{count}.#{Conf::Project}.#{vm::Domain}"
        vm_config.vm.host_name = hostname
        vm_config.vm.customize ["modifyvm", :id, "--name", "#{vm::Longname} #{formatted_count} (#{hostname})"]
        vm_config.vm.customize ["modifyvm", :id, "--memory", "#{vm::Memory}"]
        if defined?(vm::NFS_shares) # Deprecated, as NFS is now supported directly in Dir_shares
          vm::NFS_shares.each do |name, path|
            vm_config.vm.share_folder(name, path, "./#{name}", { :nfs => true, :create => true, :remount => true })
          end
        end
        if defined?(vm::Dir_shares)
          vm::Dir_shares.each do |name, share|
            vm_config.vm.share_folder(name, share["guest_path"], share["host_path"], share["nfs"])
          end
        end
        if vm::Gui == true
          vm_config.vm.boot_mode = :gui
        end

        # We can speed up subsequent rebuilds by caching the apt cache directories
        # on the host machine.
        current_dir = File.dirname(__FILE__)
        apt_cache = "#{current_dir}/tmp/apt/cache"
        require "fileutils"
        # We seem to need to create the partial directory.
        FileUtils.mkdir_p("#{apt_cache}/partial")
        vm_config.vm.share_folder "apt-cache", "/var/cache/apt/archives", apt_cache

        if File::exists?("#{vm::Manifests}/#{vm::Site}.pp")
          vm_config.vm.provision :puppet do |puppet|
            puppet.manifest_file = "#{vm::Site}.pp"
            # Initialize an empty array so we can push onto it
            puppet.module_path = []
            # Merge in project-specific Puppet modules
            vm::Modules.update(Conf::Modules)
            vm::Modules.each do |name,path|
              # Expand relative paths (such as '~')
              full_path = File.expand_path("#{path}")
              # Cull directories that don't exist, since Puppet will
              # throw errors if passed a module_path that doesn't exist
              if File::directory?("#{full_path}")
                puppet.module_path.push("#{full_path}")
              end
            end
            puppet.facter = Conf::Facts.update(vm::Facts)
            puppet.options = vm::Options
            if vm::Debug == true
              puppet.options = puppet.options + " --debug"
            end
            if vm::Verbose == true
              puppet.options = puppet.options + " --verbose"
            end
          end
        end

      end

    end
  end

end
